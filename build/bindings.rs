/* automatically generated by rust-bindgen 0.59.2 */

pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _CTYPE_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _LOCALE_H: u32 = 1;
pub const _BITS_LOCALE_H: u32 = 1;
pub const __LC_CTYPE: u32 = 0;
pub const __LC_NUMERIC: u32 = 1;
pub const __LC_TIME: u32 = 2;
pub const __LC_COLLATE: u32 = 3;
pub const __LC_MONETARY: u32 = 4;
pub const __LC_MESSAGES: u32 = 5;
pub const __LC_ALL: u32 = 6;
pub const __LC_PAPER: u32 = 7;
pub const __LC_NAME: u32 = 8;
pub const __LC_ADDRESS: u32 = 9;
pub const __LC_TELEPHONE: u32 = 10;
pub const __LC_MEASUREMENT: u32 = 11;
pub const __LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE: u32 = 0;
pub const LC_NUMERIC: u32 = 1;
pub const LC_TIME: u32 = 2;
pub const LC_COLLATE: u32 = 3;
pub const LC_MONETARY: u32 = 4;
pub const LC_MESSAGES: u32 = 5;
pub const LC_ALL: u32 = 6;
pub const LC_PAPER: u32 = 7;
pub const LC_NAME: u32 = 8;
pub const LC_ADDRESS: u32 = 9;
pub const LC_TELEPHONE: u32 = 10;
pub const LC_MEASUREMENT: u32 = 11;
pub const LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE_MASK: u32 = 1;
pub const LC_NUMERIC_MASK: u32 = 2;
pub const LC_TIME_MASK: u32 = 4;
pub const LC_COLLATE_MASK: u32 = 8;
pub const LC_MONETARY_MASK: u32 = 16;
pub const LC_MESSAGES_MASK: u32 = 32;
pub const LC_PAPER_MASK: u32 = 128;
pub const LC_NAME_MASK: u32 = 256;
pub const LC_ADDRESS_MASK: u32 = 512;
pub const LC_TELEPHONE_MASK: u32 = 1024;
pub const LC_MEASUREMENT_MASK: u32 = 2048;
pub const LC_IDENTIFICATION_MASK: u32 = 4096;
pub const LC_ALL_MASK: u32 = 8127;
pub const NCURSES_DLL_H_incl: u32 = 1;
pub const CURSES: u32 = 1;
pub const CURSES_H: u32 = 1;
pub const NCURSES_VERSION_MAJOR: u32 = 6;
pub const NCURSES_VERSION_MINOR: u32 = 3;
pub const NCURSES_VERSION_PATCH: u32 = 20211021;
pub const NCURSES_VERSION: &[u8; 4usize] = b"6.3\0";
pub const NCURSES_MOUSE_VERSION: u32 = 2;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const NCURSES_ENABLE_STDBOOL_H: u32 = 1;
pub const NCURSES_OPAQUE: u32 = 0;
pub const NCURSES_OPAQUE_FORM: u32 = 0;
pub const NCURSES_OPAQUE_MENU: u32 = 0;
pub const NCURSES_OPAQUE_PANEL: u32 = 0;
pub const NCURSES_WATTR_MACROS: u32 = 0;
pub const NCURSES_REENTRANT: u32 = 0;
pub const NCURSES_INTEROP_FUNCS: u32 = 1;
pub const NCURSES_TPARM_VARARGS: u32 = 1;
pub const NCURSES_WCWIDTH_GRAPHICS: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const NCURSES_WIDECHAR: u32 = 1;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const COLOR_BLACK: u32 = 0;
pub const COLOR_RED: u32 = 1;
pub const COLOR_GREEN: u32 = 2;
pub const COLOR_YELLOW: u32 = 3;
pub const COLOR_BLUE: u32 = 4;
pub const COLOR_MAGENTA: u32 = 5;
pub const COLOR_CYAN: u32 = 6;
pub const COLOR_WHITE: u32 = 7;
pub const ERR: i32 = -1;
pub const OK: u32 = 0;
pub const _SUBWIN: u32 = 1;
pub const _ENDLINE: u32 = 2;
pub const _FULLWIN: u32 = 4;
pub const _SCROLLWIN: u32 = 8;
pub const _ISPAD: u32 = 16;
pub const _HASMOVED: u32 = 32;
pub const _WRAPPED: u32 = 64;
pub const _NOCHANGE: i32 = -1;
pub const _NEWINDEX: i32 = -1;
pub const _WCHAR_H: u32 = 1;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __wint_t_defined: u32 = 1;
pub const _WINT_T: u32 = 1;
pub const __mbstate_t_defined: u32 = 1;
pub const WEOF: u32 = 4294967295;
pub const CCHARW_MAX: u32 = 5;
pub const NCURSES_EXT_COLORS: u32 = 20211021;
pub const NCURSES_EXT_FUNCS: u32 = 20211021;
pub const NCURSES_SP_FUNCS: u32 = 20211021;
pub const NCURSES_ATTR_SHIFT: u32 = 8;
pub const A_NORMAL: u32 = 0;
pub const KEY_CODE_YES: u32 = 256;
pub const KEY_MIN: u32 = 257;
pub const KEY_BREAK: u32 = 257;
pub const KEY_SRESET: u32 = 344;
pub const KEY_RESET: u32 = 345;
pub const KEY_DOWN: u32 = 258;
pub const KEY_UP: u32 = 259;
pub const KEY_LEFT: u32 = 260;
pub const KEY_RIGHT: u32 = 261;
pub const KEY_HOME: u32 = 262;
pub const KEY_BACKSPACE: u32 = 263;
pub const KEY_F0: u32 = 264;
pub const KEY_DL: u32 = 328;
pub const KEY_IL: u32 = 329;
pub const KEY_DC: u32 = 330;
pub const KEY_IC: u32 = 331;
pub const KEY_EIC: u32 = 332;
pub const KEY_CLEAR: u32 = 333;
pub const KEY_EOS: u32 = 334;
pub const KEY_EOL: u32 = 335;
pub const KEY_SF: u32 = 336;
pub const KEY_SR: u32 = 337;
pub const KEY_NPAGE: u32 = 338;
pub const KEY_PPAGE: u32 = 339;
pub const KEY_STAB: u32 = 340;
pub const KEY_CTAB: u32 = 341;
pub const KEY_CATAB: u32 = 342;
pub const KEY_ENTER: u32 = 343;
pub const KEY_PRINT: u32 = 346;
pub const KEY_LL: u32 = 347;
pub const KEY_A1: u32 = 348;
pub const KEY_A3: u32 = 349;
pub const KEY_B2: u32 = 350;
pub const KEY_C1: u32 = 351;
pub const KEY_C3: u32 = 352;
pub const KEY_BTAB: u32 = 353;
pub const KEY_BEG: u32 = 354;
pub const KEY_CANCEL: u32 = 355;
pub const KEY_CLOSE: u32 = 356;
pub const KEY_COMMAND: u32 = 357;
pub const KEY_COPY: u32 = 358;
pub const KEY_CREATE: u32 = 359;
pub const KEY_END: u32 = 360;
pub const KEY_EXIT: u32 = 361;
pub const KEY_FIND: u32 = 362;
pub const KEY_HELP: u32 = 363;
pub const KEY_MARK: u32 = 364;
pub const KEY_MESSAGE: u32 = 365;
pub const KEY_MOVE: u32 = 366;
pub const KEY_NEXT: u32 = 367;
pub const KEY_OPEN: u32 = 368;
pub const KEY_OPTIONS: u32 = 369;
pub const KEY_PREVIOUS: u32 = 370;
pub const KEY_REDO: u32 = 371;
pub const KEY_REFERENCE: u32 = 372;
pub const KEY_REFRESH: u32 = 373;
pub const KEY_REPLACE: u32 = 374;
pub const KEY_RESTART: u32 = 375;
pub const KEY_RESUME: u32 = 376;
pub const KEY_SAVE: u32 = 377;
pub const KEY_SBEG: u32 = 378;
pub const KEY_SCANCEL: u32 = 379;
pub const KEY_SCOMMAND: u32 = 380;
pub const KEY_SCOPY: u32 = 381;
pub const KEY_SCREATE: u32 = 382;
pub const KEY_SDC: u32 = 383;
pub const KEY_SDL: u32 = 384;
pub const KEY_SELECT: u32 = 385;
pub const KEY_SEND: u32 = 386;
pub const KEY_SEOL: u32 = 387;
pub const KEY_SEXIT: u32 = 388;
pub const KEY_SFIND: u32 = 389;
pub const KEY_SHELP: u32 = 390;
pub const KEY_SHOME: u32 = 391;
pub const KEY_SIC: u32 = 392;
pub const KEY_SLEFT: u32 = 393;
pub const KEY_SMESSAGE: u32 = 394;
pub const KEY_SMOVE: u32 = 395;
pub const KEY_SNEXT: u32 = 396;
pub const KEY_SOPTIONS: u32 = 397;
pub const KEY_SPREVIOUS: u32 = 398;
pub const KEY_SPRINT: u32 = 399;
pub const KEY_SREDO: u32 = 400;
pub const KEY_SREPLACE: u32 = 401;
pub const KEY_SRIGHT: u32 = 402;
pub const KEY_SRSUME: u32 = 403;
pub const KEY_SSAVE: u32 = 404;
pub const KEY_SSUSPEND: u32 = 405;
pub const KEY_SUNDO: u32 = 406;
pub const KEY_SUSPEND: u32 = 407;
pub const KEY_UNDO: u32 = 408;
pub const KEY_MOUSE: u32 = 409;
pub const KEY_RESIZE: u32 = 410;
pub const KEY_MAX: u32 = 511;
pub const _XOPEN_CURSES: u32 = 1;
pub const NCURSES_BUTTON_RELEASED: u32 = 1;
pub const NCURSES_BUTTON_PRESSED: u32 = 2;
pub const NCURSES_BUTTON_CLICKED: u32 = 4;
pub const NCURSES_DOUBLE_CLICKED: u32 = 8;
pub const NCURSES_TRIPLE_CLICKED: u32 = 16;
pub const NCURSES_RESERVED_EVENT: u32 = 32;
pub const TRACE_DISABLE: u32 = 0;
pub const TRACE_TIMES: u32 = 1;
pub const TRACE_TPUTS: u32 = 2;
pub const TRACE_UPDATE: u32 = 4;
pub const TRACE_MOVE: u32 = 8;
pub const TRACE_CHARPUT: u32 = 16;
pub const TRACE_ORDINARY: u32 = 31;
pub const TRACE_CALLS: u32 = 32;
pub const TRACE_VIRTPUT: u32 = 64;
pub const TRACE_IEVENT: u32 = 128;
pub const TRACE_BITS: u32 = 256;
pub const TRACE_ICALLS: u32 = 512;
pub const TRACE_CCALLS: u32 = 1024;
pub const TRACE_DATABASE: u32 = 2048;
pub const TRACE_ATTRS: u32 = 4096;
pub const TRACE_SHIFT: u32 = 13;
pub const TRACE_MAXIMUM: u32 = 8191;
pub const NCURSES_UNCTRL_H_incl: u32 = 1;
pub const NCURSES_PANEL_H_incl: u32 = 1;
pub const NCURSES_ETI_H_incl: u32 = 1;
pub const E_OK: u32 = 0;
pub const E_SYSTEM_ERROR: i32 = -1;
pub const E_BAD_ARGUMENT: i32 = -2;
pub const E_POSTED: i32 = -3;
pub const E_CONNECTED: i32 = -4;
pub const E_BAD_STATE: i32 = -5;
pub const E_NO_ROOM: i32 = -6;
pub const E_NOT_POSTED: i32 = -7;
pub const E_UNKNOWN_COMMAND: i32 = -8;
pub const E_NO_MATCH: i32 = -9;
pub const E_NOT_SELECTABLE: i32 = -10;
pub const E_NOT_CONNECTED: i32 = -11;
pub const E_REQUEST_DENIED: i32 = -12;
pub const E_INVALID_FIELD: i32 = -13;
pub const E_CURRENT: i32 = -14;
pub const O_ONEVALUE: u32 = 1;
pub const O_SHOWDESC: u32 = 2;
pub const O_ROWMAJOR: u32 = 4;
pub const O_IGNORECASE: u32 = 8;
pub const O_SHOWMATCH: u32 = 16;
pub const O_NONCYCLIC: u32 = 32;
pub const O_MOUSE_MENU: u32 = 64;
pub const O_SELECTABLE: u32 = 1;
pub const REQ_LEFT_ITEM: u32 = 512;
pub const REQ_RIGHT_ITEM: u32 = 513;
pub const REQ_UP_ITEM: u32 = 514;
pub const REQ_DOWN_ITEM: u32 = 515;
pub const REQ_SCR_ULINE: u32 = 516;
pub const REQ_SCR_DLINE: u32 = 517;
pub const REQ_SCR_DPAGE: u32 = 518;
pub const REQ_SCR_UPAGE: u32 = 519;
pub const REQ_FIRST_ITEM: u32 = 520;
pub const REQ_LAST_ITEM: u32 = 521;
pub const REQ_NEXT_ITEM: u32 = 522;
pub const REQ_PREV_ITEM: u32 = 523;
pub const REQ_TOGGLE_ITEM: u32 = 524;
pub const REQ_CLEAR_PATTERN: u32 = 525;
pub const REQ_BACK_PATTERN: u32 = 526;
pub const REQ_NEXT_MATCH: u32 = 527;
pub const REQ_PREV_MATCH: u32 = 528;
pub const MIN_MENU_COMMAND: u32 = 512;
pub const MAX_MENU_COMMAND: u32 = 528;
pub const MAX_COMMAND: u32 = 639;
pub const NO_JUSTIFICATION: u32 = 0;
pub const JUSTIFY_LEFT: u32 = 1;
pub const JUSTIFY_CENTER: u32 = 2;
pub const JUSTIFY_RIGHT: u32 = 3;
pub const O_VISIBLE: u32 = 1;
pub const O_ACTIVE: u32 = 2;
pub const O_PUBLIC: u32 = 4;
pub const O_EDIT: u32 = 8;
pub const O_WRAP: u32 = 16;
pub const O_BLANK: u32 = 32;
pub const O_AUTOSKIP: u32 = 64;
pub const O_NULLOK: u32 = 128;
pub const O_PASSOK: u32 = 256;
pub const O_STATIC: u32 = 512;
pub const O_DYNAMIC_JUSTIFY: u32 = 1024;
pub const O_NO_LEFT_STRIP: u32 = 2048;
pub const O_EDGE_INSERT_STAY: u32 = 4096;
pub const O_INPUT_LIMIT: u32 = 8192;
pub const O_NL_OVERLOAD: u32 = 1;
pub const O_BS_OVERLOAD: u32 = 2;
pub const REQ_NEXT_PAGE: u32 = 512;
pub const REQ_PREV_PAGE: u32 = 513;
pub const REQ_FIRST_PAGE: u32 = 514;
pub const REQ_LAST_PAGE: u32 = 515;
pub const REQ_NEXT_FIELD: u32 = 516;
pub const REQ_PREV_FIELD: u32 = 517;
pub const REQ_FIRST_FIELD: u32 = 518;
pub const REQ_LAST_FIELD: u32 = 519;
pub const REQ_SNEXT_FIELD: u32 = 520;
pub const REQ_SPREV_FIELD: u32 = 521;
pub const REQ_SFIRST_FIELD: u32 = 522;
pub const REQ_SLAST_FIELD: u32 = 523;
pub const REQ_LEFT_FIELD: u32 = 524;
pub const REQ_RIGHT_FIELD: u32 = 525;
pub const REQ_UP_FIELD: u32 = 526;
pub const REQ_DOWN_FIELD: u32 = 527;
pub const REQ_NEXT_CHAR: u32 = 528;
pub const REQ_PREV_CHAR: u32 = 529;
pub const REQ_NEXT_LINE: u32 = 530;
pub const REQ_PREV_LINE: u32 = 531;
pub const REQ_NEXT_WORD: u32 = 532;
pub const REQ_PREV_WORD: u32 = 533;
pub const REQ_BEG_FIELD: u32 = 534;
pub const REQ_END_FIELD: u32 = 535;
pub const REQ_BEG_LINE: u32 = 536;
pub const REQ_END_LINE: u32 = 537;
pub const REQ_LEFT_CHAR: u32 = 538;
pub const REQ_RIGHT_CHAR: u32 = 539;
pub const REQ_UP_CHAR: u32 = 540;
pub const REQ_DOWN_CHAR: u32 = 541;
pub const REQ_NEW_LINE: u32 = 542;
pub const REQ_INS_CHAR: u32 = 543;
pub const REQ_INS_LINE: u32 = 544;
pub const REQ_DEL_CHAR: u32 = 545;
pub const REQ_DEL_PREV: u32 = 546;
pub const REQ_DEL_LINE: u32 = 547;
pub const REQ_DEL_WORD: u32 = 548;
pub const REQ_CLR_EOL: u32 = 549;
pub const REQ_CLR_EOF: u32 = 550;
pub const REQ_CLR_FIELD: u32 = 551;
pub const REQ_OVL_MODE: u32 = 552;
pub const REQ_INS_MODE: u32 = 553;
pub const REQ_SCR_FLINE: u32 = 554;
pub const REQ_SCR_BLINE: u32 = 555;
pub const REQ_SCR_FPAGE: u32 = 556;
pub const REQ_SCR_BPAGE: u32 = 557;
pub const REQ_SCR_FHPAGE: u32 = 558;
pub const REQ_SCR_BHPAGE: u32 = 559;
pub const REQ_SCR_FCHAR: u32 = 560;
pub const REQ_SCR_BCHAR: u32 = 561;
pub const REQ_SCR_HFLINE: u32 = 562;
pub const REQ_SCR_HBLINE: u32 = 563;
pub const REQ_SCR_HFHALF: u32 = 564;
pub const REQ_SCR_HBHALF: u32 = 565;
pub const REQ_VALIDATION: u32 = 566;
pub const REQ_NEXT_CHOICE: u32 = 567;
pub const REQ_PREV_CHOICE: u32 = 568;
pub const MIN_FORM_COMMAND: u32 = 512;
pub const MAX_FORM_COMMAND: u32 = 568;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub const _ISupper: ::std::os::raw::c_uint = 256;
pub const _ISlower: ::std::os::raw::c_uint = 512;
pub const _ISalpha: ::std::os::raw::c_uint = 1024;
pub const _ISdigit: ::std::os::raw::c_uint = 2048;
pub const _ISxdigit: ::std::os::raw::c_uint = 4096;
pub const _ISspace: ::std::os::raw::c_uint = 8192;
pub const _ISprint: ::std::os::raw::c_uint = 16384;
pub const _ISgraph: ::std::os::raw::c_uint = 32768;
pub const _ISblank: ::std::os::raw::c_uint = 1;
pub const _IScntrl: ::std::os::raw::c_uint = 2;
pub const _ISpunct: ::std::os::raw::c_uint = 4;
pub const _ISalnum: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_lconv() {
    assert_eq!(
        ::std::mem::size_of::<lconv>(),
        96usize,
        concat!("Size of: ", stringify!(lconv))
    );
    assert_eq!(
        ::std::mem::align_of::<lconv>(),
        8usize,
        concat!("Alignment of ", stringify!(lconv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).decimal_point as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(decimal_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).thousands_sep as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(thousands_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).grouping as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(grouping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_curr_symbol as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_curr_symbol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).currency_symbol as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(currency_symbol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).mon_decimal_point as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_decimal_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).mon_thousands_sep as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_thousands_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).mon_grouping as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_grouping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).positive_sign as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(positive_sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).negative_sign as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(negative_sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_frac_digits as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_frac_digits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).frac_digits as *const _ as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(frac_digits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).p_cs_precedes as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).p_sep_by_space as *const _ as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).n_cs_precedes as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).n_sep_by_space as *const _ as usize },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).p_sign_posn as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).n_sign_posn as *const _ as usize },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_sign_posn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_p_cs_precedes as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_p_sep_by_space as *const _ as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_n_cs_precedes as *const _ as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_n_sep_by_space as *const _ as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_p_sign_posn as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_n_sign_posn as *const _ as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_sign_posn)
        )
    );
}
extern "C" {
    pub fn setlocale(
        __category: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn localeconv() -> *mut lconv;
}
extern "C" {
    pub fn newlocale(
        __category_mask: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
        __base: locale_t,
    ) -> locale_t;
}
extern "C" {
    pub fn duplocale(__dataset: locale_t) -> locale_t;
}
extern "C" {
    pub fn freelocale(__dataset: locale_t);
}
extern "C" {
    pub fn uselocale(__dataset: locale_t) -> locale_t;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type chtype = ::std::os::raw::c_uint;
pub type mmask_t = ::std::os::raw::c_uint;
pub type size_t = ::std::os::raw::c_ulong;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type NCURSES_BOOL = ::std::os::raw::c_uchar;
extern "C" {
    pub static mut acs_map: [chtype; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct screen {
    _unused: [u8; 0],
}
pub type SCREEN = screen;
pub type WINDOW = _win_st;
pub type attr_t = chtype;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
pub type wint_t = ::std::os::raw::c_uint;
pub type mbstate_t = __mbstate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    _unused: [u8; 0],
}
extern "C" {
    pub fn wcscpy(__dest: *mut wchar_t, __src: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncpy(__dest: *mut wchar_t, __src: *const wchar_t, __n: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(__dest: *mut wchar_t, __src: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncat(__dest: *mut wchar_t, __src: *const wchar_t, __n: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(
        __s1: *const ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncmp(
        __s1: *const ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp(__s1: *const wchar_t, __s2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp_l(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp_l(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __n: size_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscoll(__s1: *const wchar_t, __s2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm(__s1: *mut wchar_t, __s2: *const wchar_t, __n: size_t) -> size_t;
}
extern "C" {
    pub fn wcscoll_l(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm_l(
        __s1: *mut wchar_t,
        __s2: *const wchar_t,
        __n: size_t,
        __loc: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcsdup(__s: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcschr(
        __wcs: *const ::std::os::raw::c_int,
        __wc: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsrchr(__wcs: *const wchar_t, __wc: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(__wcs: *const wchar_t, __reject: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcsspn(__wcs: *const wchar_t, __accept: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcspbrk(__wcs: *const wchar_t, __accept: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(__haystack: *const wchar_t, __needle: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstok(
        __s: *mut wchar_t,
        __delim: *const wchar_t,
        __ptr: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslen(__s: *const ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcsnlen(__s: *const wchar_t, __maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn wmemchr(
        __s: *const ::std::os::raw::c_int,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcmp(
        __s1: *const ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy(
        __s1: *mut ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemmove(
        __s1: *mut ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemset(__s: *mut wchar_t, __c: wchar_t, __n: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn btowc(__c: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn wctob(__c: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsinit(__ps: *const mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbrtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
        __p: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcrtomb(__s: *mut ::std::os::raw::c_char, __wc: wchar_t, __ps: *mut mbstate_t)
        -> size_t;
}
extern "C" {
    pub fn __mbrlen(
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbrlen(__s: *const ::std::os::raw::c_char, __n: size_t, __ps: *mut mbstate_t) -> size_t;
}
extern "C" {
    pub fn mbsrtowcs(
        __dst: *mut wchar_t,
        __src: *mut *const ::std::os::raw::c_char,
        __len: size_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcsrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const wchar_t,
        __len: size_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbsnrtowcs(
        __dst: *mut wchar_t,
        __src: *mut *const ::std::os::raw::c_char,
        __nmc: size_t,
        __len: size_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcsnrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const wchar_t,
        __nwc: size_t,
        __len: size_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstod(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstof(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn wcstold(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> u128;
}
extern "C" {
    pub fn wcstol(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoll(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcpcpy(__dest: *mut wchar_t, __src: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcpncpy(__dest: *mut wchar_t, __src: *const wchar_t, __n: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn open_wmemstream(__bufloc: *mut *mut wchar_t, __sizeloc: *mut size_t) -> *mut __FILE;
}
extern "C" {
    pub fn fwide(__fp: *mut __FILE, __mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(__stream: *mut __FILE, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintf(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swprintf(
        __s: *mut wchar_t,
        __n: size_t,
        __format: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwprintf(
        __s: *mut __FILE,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf(__format: *const wchar_t, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf(
        __s: *mut wchar_t,
        __n: size_t,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf(__stream: *mut __FILE, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf(__s: *const wchar_t, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fwscanf"]
    pub fn fwscanf1(__stream: *mut __FILE, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_wscanf"]
    pub fn wscanf1(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_swscanf"]
    pub fn swscanf1(__s: *const wchar_t, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf(
        __s: *mut __FILE,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf(__format: *const wchar_t, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf(
        __s: *const wchar_t,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfwscanf"]
    pub fn vfwscanf1(
        __s: *mut __FILE,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vwscanf"]
    pub fn vwscanf1(__format: *const wchar_t, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vswscanf"]
    pub fn vswscanf1(
        __s: *const wchar_t,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwc(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(__wc: wchar_t) -> wint_t;
}
extern "C" {
    pub fn fgetws(
        __ws: *mut wchar_t,
        __n: ::std::os::raw::c_int,
        __stream: *mut __FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(__ws: *const wchar_t, __stream: *mut __FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(__wc: wint_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn wcsftime(
        __s: *mut wchar_t,
        __maxsize: size_t,
        __format: *const wchar_t,
        __tp: *const tm,
    ) -> size_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cchar_t {
    pub attr: attr_t,
    pub chars: [wchar_t; 5usize],
    pub ext_color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cchar_t() {
    assert_eq!(
        ::std::mem::size_of::<cchar_t>(),
        28usize,
        concat!("Size of: ", stringify!(cchar_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cchar_t>(),
        4usize,
        concat!("Alignment of ", stringify!(cchar_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cchar_t>())).attr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cchar_t),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cchar_t>())).chars as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cchar_t),
            "::",
            stringify!(chars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cchar_t>())).ext_color as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cchar_t),
            "::",
            stringify!(ext_color)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldat {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _win_st {
    pub _cury: ::std::os::raw::c_short,
    pub _curx: ::std::os::raw::c_short,
    pub _maxy: ::std::os::raw::c_short,
    pub _maxx: ::std::os::raw::c_short,
    pub _begy: ::std::os::raw::c_short,
    pub _begx: ::std::os::raw::c_short,
    pub _flags: ::std::os::raw::c_short,
    pub _attrs: attr_t,
    pub _bkgd: chtype,
    pub _notimeout: bool,
    pub _clear: bool,
    pub _leaveok: bool,
    pub _scroll: bool,
    pub _idlok: bool,
    pub _idcok: bool,
    pub _immed: bool,
    pub _sync: bool,
    pub _use_keypad: bool,
    pub _delay: ::std::os::raw::c_int,
    pub _line: *mut ldat,
    pub _regtop: ::std::os::raw::c_short,
    pub _regbottom: ::std::os::raw::c_short,
    pub _parx: ::std::os::raw::c_int,
    pub _pary: ::std::os::raw::c_int,
    pub _parent: *mut WINDOW,
    pub _pad: _win_st_pdat,
    pub _yoffset: ::std::os::raw::c_short,
    pub _bkgrnd: cchar_t,
    pub _color: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _win_st_pdat {
    pub _pad_y: ::std::os::raw::c_short,
    pub _pad_x: ::std::os::raw::c_short,
    pub _pad_top: ::std::os::raw::c_short,
    pub _pad_left: ::std::os::raw::c_short,
    pub _pad_bottom: ::std::os::raw::c_short,
    pub _pad_right: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout__win_st_pdat() {
    assert_eq!(
        ::std::mem::size_of::<_win_st_pdat>(),
        12usize,
        concat!("Size of: ", stringify!(_win_st_pdat))
    );
    assert_eq!(
        ::std::mem::align_of::<_win_st_pdat>(),
        2usize,
        concat!("Alignment of ", stringify!(_win_st_pdat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st_pdat>()))._pad_y as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st_pdat),
            "::",
            stringify!(_pad_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st_pdat>()))._pad_x as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st_pdat),
            "::",
            stringify!(_pad_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st_pdat>()))._pad_top as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st_pdat),
            "::",
            stringify!(_pad_top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st_pdat>()))._pad_left as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st_pdat),
            "::",
            stringify!(_pad_left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st_pdat>()))._pad_bottom as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st_pdat),
            "::",
            stringify!(_pad_bottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st_pdat>()))._pad_right as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st_pdat),
            "::",
            stringify!(_pad_right)
        )
    );
}
#[test]
fn bindgen_test_layout__win_st() {
    assert_eq!(
        ::std::mem::size_of::<_win_st>(),
        120usize,
        concat!("Size of: ", stringify!(_win_st))
    );
    assert_eq!(
        ::std::mem::align_of::<_win_st>(),
        8usize,
        concat!("Alignment of ", stringify!(_win_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._cury as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_cury)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._curx as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_curx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._maxy as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_maxy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._maxx as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_maxx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._begy as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_begy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._begx as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_begx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._attrs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_attrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._bkgd as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_bkgd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._notimeout as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_notimeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._clear as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._leaveok as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_leaveok)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._scroll as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_scroll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._idlok as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_idlok)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._idcok as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_idcok)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._immed as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_immed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._sync as *const _ as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_sync)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._use_keypad as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_use_keypad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._delay as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._line as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._regtop as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_regtop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._regbottom as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_regbottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._parx as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_parx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._pary as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_pary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._parent as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._pad as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._yoffset as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_yoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._bkgrnd as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_bkgrnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_win_st>()))._color as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_color)
        )
    );
}
pub type NCURSES_OUTC = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn addch(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addchnstr(arg1: *const chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addchstr(arg1: *const chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addnstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addstr(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attroff(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attron(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attrset(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_get(
        arg1: *mut attr_t,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_off(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_on(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_set(
        arg1: attr_t,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn baudrate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn beep() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bkgd(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bkgdset(arg1: chtype);
}
extern "C" {
    pub fn border(
        arg1: chtype,
        arg2: chtype,
        arg3: chtype,
        arg4: chtype,
        arg5: chtype,
        arg6: chtype,
        arg7: chtype,
        arg8: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}box"]
    pub fn box_(arg1: *mut WINDOW, arg2: chtype, arg3: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn can_change_color() -> bool;
}
extern "C" {
    pub fn cbreak() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chgat(
        arg1: ::std::os::raw::c_int,
        arg2: attr_t,
        arg3: ::std::os::raw::c_short,
        arg4: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clear() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clrtobot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clrtoeol() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn color_content(
        arg1: ::std::os::raw::c_short,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn color_set(
        arg1: ::std::os::raw::c_short,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn COLOR_PAIR(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copywin(
        arg1: *const WINDOW,
        arg2: *mut WINDOW,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn curs_set(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn def_prog_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn def_shell_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delay_output(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delscreen(arg1: *mut SCREEN);
}
extern "C" {
    pub fn delwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deleteln() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn derwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn doupdate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dupwin(arg1: *mut WINDOW) -> *mut WINDOW;
}
extern "C" {
    pub fn echo() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn echochar(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erase() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endwin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erasechar() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn filter();
}
extern "C" {
    pub fn flash() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushinp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbkgd(arg1: *mut WINDOW) -> chtype;
}
extern "C" {
    pub fn getch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getstr(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwin(arg1: *mut FILE) -> *mut WINDOW;
}
extern "C" {
    pub fn halfdelay(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_colors() -> bool;
}
extern "C" {
    pub fn has_ic() -> bool;
}
extern "C" {
    pub fn has_il() -> bool;
}
extern "C" {
    pub fn hline(arg1: chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn idcok(arg1: *mut WINDOW, arg2: bool);
}
extern "C" {
    pub fn idlok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn immedok(arg1: *mut WINDOW, arg2: bool);
}
extern "C" {
    pub fn inch() -> chtype;
}
extern "C" {
    pub fn inchnstr(arg1: *mut chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inchstr(arg1: *mut chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initscr() -> *mut WINDOW;
}
extern "C" {
    pub fn init_color(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_pair(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn innstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insch(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insdelln(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insertln() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insnstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insstr(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn instr(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn intrflush(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isendwin() -> bool;
}
extern "C" {
    pub fn is_linetouched(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn is_wintouched(arg1: *mut WINDOW) -> bool;
}
extern "C" {
    pub fn keyname(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn keypad(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killchar() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn leaveok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longname() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn meta(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}move"]
    pub fn move_(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddchnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddchstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvchgat(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: attr_t,
        arg5: ::std::os::raw::c_short,
        arg6: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvcur(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvdelch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvderwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvhline(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinch(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> chtype;
}
extern "C" {
    pub fn mvinchnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinchstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinsch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinsnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinsstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvprintw(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvscanw(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvvline(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddchnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddchstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwchgat(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: attr_t,
        arg6: ::std::os::raw::c_short,
        arg7: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwdelch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwhline(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> chtype;
}
extern "C" {
    pub fn mvwinchnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinchstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinsch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinsnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinsstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwprintw(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwscanw(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwvline(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn napms(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newpad(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> *mut WINDOW;
}
extern "C" {
    pub fn newterm(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut FILE,
        arg3: *mut FILE,
    ) -> *mut SCREEN;
}
extern "C" {
    pub fn newwin(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn nl() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nocbreak() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nodelay(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noecho() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nonl() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noqiflush();
}
extern "C" {
    pub fn noraw() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn notimeout(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn overlay(arg1: *const WINDOW, arg2: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn overwrite(arg1: *const WINDOW, arg2: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pair_content(
        arg1: ::std::os::raw::c_short,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PAIR_NUMBER(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pechochar(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pnoutrefresh(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prefresh(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printw(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putwin(arg1: *mut WINDOW, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qiflush();
}
extern "C" {
    pub fn raw() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn redrawwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn refresh() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resetty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_prog_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_shell_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn savetty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanw(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_dump(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_init(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scroll(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scrollok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_restore(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_set(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setscrreg(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_term(arg1: *mut SCREEN) -> *mut SCREEN;
}
extern "C" {
    pub fn slk_attroff(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr_off(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attron(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr_on(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attrset(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr() -> attr_t;
}
extern "C" {
    pub fn slk_attr_set(
        arg1: attr_t,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_clear() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_color(arg1: ::std::os::raw::c_short) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_init(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_label(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn slk_noutrefresh() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_refresh() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_restore() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_set(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_touch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn standout() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn standend() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn start_color() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn subpad(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn subwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn syncok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn termattrs() -> chtype;
}
extern "C" {
    pub fn termname() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn timeout(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn touchline(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn touchwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn typeahead(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetch(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn untouchwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_env(arg1: bool);
}
extern "C" {
    pub fn use_tioctl(arg1: bool);
}
extern "C" {
    pub fn vidattr(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vidputs(arg1: chtype, arg2: NCURSES_OUTC) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vline(arg1: chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintw(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vw_printw(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanw(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vw_scanw(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddch(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddchnstr(
        arg1: *mut WINDOW,
        arg2: *const chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddchstr(arg1: *mut WINDOW, arg2: *const chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddnstr(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddstr(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattron(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattroff(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattrset(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_get(
        arg1: *mut WINDOW,
        arg2: *mut attr_t,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_on(
        arg1: *mut WINDOW,
        arg2: attr_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_off(
        arg1: *mut WINDOW,
        arg2: attr_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_set(
        arg1: *mut WINDOW,
        arg2: attr_t,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbkgd(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbkgdset(arg1: *mut WINDOW, arg2: chtype);
}
extern "C" {
    pub fn wborder(
        arg1: *mut WINDOW,
        arg2: chtype,
        arg3: chtype,
        arg4: chtype,
        arg5: chtype,
        arg6: chtype,
        arg7: chtype,
        arg8: chtype,
        arg9: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wchgat(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: attr_t,
        arg4: ::std::os::raw::c_short,
        arg5: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wclear(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wclrtobot(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wclrtoeol(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcolor_set(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcursyncup(arg1: *mut WINDOW);
}
extern "C" {
    pub fn wdelch(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wdeleteln(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wechochar(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn werase(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetch(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetnstr(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetstr(arg1: *mut WINDOW, arg2: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whline(
        arg1: *mut WINDOW,
        arg2: chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winch(arg1: *mut WINDOW) -> chtype;
}
extern "C" {
    pub fn winchnstr(
        arg1: *mut WINDOW,
        arg2: *mut chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winchstr(arg1: *mut WINDOW, arg2: *mut chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winnstr(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsch(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsdelln(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsertln(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsnstr(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsstr(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winstr(arg1: *mut WINDOW, arg2: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmove(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wnoutrefresh(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintw(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wredrawln(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wrefresh(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanw(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscrl(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wsetscrreg(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wstandout(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wstandend(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wsyncdown(arg1: *mut WINDOW);
}
extern "C" {
    pub fn wsyncup(arg1: *mut WINDOW);
}
extern "C" {
    pub fn wtimeout(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wtouchln(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wvline(
        arg1: *mut WINDOW,
        arg2: chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetflag(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetnum(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetstr(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putp(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tparm(arg1: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tiparm(arg1: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getattrs(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcurx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcury(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbegx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbegy(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmaxx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmaxy(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getparx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpary(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
pub type NCURSES_WINDOW_CB = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type NCURSES_SCREEN_CB = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut SCREEN,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn is_term_resized(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn keybound(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn curses_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn alloc_pair(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assume_default_colors(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn define_key(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn extended_color_content(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn extended_pair_content(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn extended_slk_color(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_pair(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_pair(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_escdelay() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_extended_color(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_extended_pair(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn key_defined(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn keyok(arg1: ::std::os::raw::c_int, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_color_pairs();
}
extern "C" {
    pub fn resize_term(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resizeterm(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_escdelay(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_tabsize(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_default_colors() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_extended_names(arg1: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_legacy_coding(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_screen(
        arg1: *mut SCREEN,
        arg2: NCURSES_SCREEN_CB,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_window(
        arg1: *mut WINDOW,
        arg2: NCURSES_WINDOW_CB,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wresize(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nofilter();
}
extern "C" {
    pub fn wgetparent(arg1: *const WINDOW) -> *mut WINDOW;
}
extern "C" {
    pub fn is_cleared(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_idcok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_idlok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_immedok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_keypad(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_leaveok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_nodelay(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_notimeout(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_pad(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_scrollok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_subwin(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_syncok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn wgetdelay(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetscrreg(
        arg1: *const WINDOW,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type NCURSES_OUTC_sp = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn new_prescr() -> *mut SCREEN;
}
extern "C" {
    pub fn baudrate_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn beep_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn can_change_color_sp(arg1: *mut SCREEN) -> bool;
}
extern "C" {
    pub fn cbreak_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn curs_set_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn color_content_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn def_prog_mode_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn def_shell_mode_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delay_output_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doupdate_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn echo_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endwin_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erasechar_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn filter_sp(arg1: *mut SCREEN);
}
extern "C" {
    pub fn flash_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushinp_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwin_sp(arg1: *mut SCREEN, arg2: *mut FILE) -> *mut WINDOW;
}
extern "C" {
    pub fn halfdelay_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_colors_sp(arg1: *mut SCREEN) -> bool;
}
extern "C" {
    pub fn has_ic_sp(arg1: *mut SCREEN) -> bool;
}
extern "C" {
    pub fn has_il_sp(arg1: *mut SCREEN) -> bool;
}
extern "C" {
    pub fn init_color_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_pair_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn intrflush_sp(arg1: *mut SCREEN, arg2: *mut WINDOW, arg3: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isendwin_sp(arg1: *mut SCREEN) -> bool;
}
extern "C" {
    pub fn keyname_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn killchar_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn longname_sp(arg1: *mut SCREEN) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mvcur_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn napms_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newpad_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn newterm_sp(
        arg1: *mut SCREEN,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
        arg4: *mut FILE,
    ) -> *mut SCREEN;
}
extern "C" {
    pub fn newwin_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn nl_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nocbreak_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noecho_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nonl_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noqiflush_sp(arg1: *mut SCREEN);
}
extern "C" {
    pub fn noraw_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pair_content_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qiflush_sp(arg1: *mut SCREEN);
}
extern "C" {
    pub fn raw_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_prog_mode_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_shell_mode_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resetty_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn savetty_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_init_sp(
        arg1: *mut SCREEN,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_restore_sp(
        arg1: *mut SCREEN,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_set_sp(
        arg1: *mut SCREEN,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attroff_sp(arg1: *mut SCREEN, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attron_sp(arg1: *mut SCREEN, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attrset_sp(arg1: *mut SCREEN, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr_sp(arg1: *mut SCREEN) -> attr_t;
}
extern "C" {
    pub fn slk_attr_set_sp(
        arg1: *mut SCREEN,
        arg2: attr_t,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_clear_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_color_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_short) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_init_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_label_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn slk_noutrefresh_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_refresh_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_restore_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_set_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_touch_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn start_color_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn termattrs_sp(arg1: *mut SCREEN) -> chtype;
}
extern "C" {
    pub fn termname_sp(arg1: *mut SCREEN) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn typeahead_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetch_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_env_sp(arg1: *mut SCREEN, arg2: bool);
}
extern "C" {
    pub fn use_tioctl_sp(arg1: *mut SCREEN, arg2: bool);
}
extern "C" {
    pub fn vidattr_sp(arg1: *mut SCREEN, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vidputs_sp(
        arg1: *mut SCREEN,
        arg2: chtype,
        arg3: NCURSES_OUTC_sp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn keybound_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn alloc_pair_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assume_default_colors_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn define_key_sp(
        arg1: *mut SCREEN,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn extended_color_content_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn extended_pair_content_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn extended_slk_color_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_escdelay_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_pair_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_pair_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_extended_color_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_extended_pair_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_term_resized_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn key_defined_sp(
        arg1: *mut SCREEN,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn keyok_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
        arg3: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nofilter_sp(arg1: *mut SCREEN);
}
extern "C" {
    pub fn reset_color_pairs_sp(arg1: *mut SCREEN);
}
extern "C" {
    pub fn resize_term_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resizeterm_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_escdelay_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_tabsize_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_default_colors_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_legacy_coding_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut curscr: *mut WINDOW;
}
extern "C" {
    pub static mut newscr: *mut WINDOW;
}
extern "C" {
    pub static mut stdscr: *mut WINDOW;
}
extern "C" {
    pub static mut ttytype: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut COLORS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut COLOR_PAIRS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut COLS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ESCDELAY: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut LINES: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut TABSIZE: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut _nc_wacs: *mut cchar_t;
}
extern "C" {
    pub fn add_wch(arg1: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_wchnstr(arg1: *const cchar_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_wchstr(arg1: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addnwstr(arg1: *const wchar_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addwstr(arg1: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bkgrnd(arg1: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bkgrndset(arg1: *const cchar_t);
}
extern "C" {
    pub fn border_set(
        arg1: *const cchar_t,
        arg2: *const cchar_t,
        arg3: *const cchar_t,
        arg4: *const cchar_t,
        arg5: *const cchar_t,
        arg6: *const cchar_t,
        arg7: *const cchar_t,
        arg8: *const cchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn box_set(
        arg1: *mut WINDOW,
        arg2: *const cchar_t,
        arg3: *const cchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn echo_wchar(arg1: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erasewchar(arg1: *mut wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_wch(arg1: *mut wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_wstr(arg1: *mut wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbkgrnd(arg1: *mut cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getn_wstr(arg1: *mut wint_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hline_set(arg1: *const cchar_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn in_wch(arg1: *mut cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn in_wchnstr(arg1: *mut cchar_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn in_wchstr(arg1: *mut cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn innwstr(arg1: *mut wchar_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ins_nwstr(arg1: *const wchar_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ins_wch(arg1: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ins_wstr(arg1: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inwstr(arg1: *mut wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn key_name(arg1: wchar_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn killwchar(arg1: *mut wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvadd_wch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const cchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvadd_wchnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const cchar_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvadd_wchstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const cchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddnwstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddwstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvget_wch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut wint_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvget_wstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut wint_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetn_wstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut wint_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvhline_set(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const cchar_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvin_wch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut cchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvin_wchnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut cchar_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvin_wchstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut cchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinnwstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut wchar_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvins_nwstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvins_wch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const cchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvins_wstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinwstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvvline_set(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const cchar_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwadd_wch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const cchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwadd_wchnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const cchar_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwadd_wchstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const cchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddnwstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const wchar_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddwstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwget_wch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut wint_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwget_wstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut wint_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetn_wstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut wint_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwhline_set(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const cchar_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwin_wch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut cchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwin_wchnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut cchar_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwin_wchstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut cchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinnwstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut wchar_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwins_nwstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const wchar_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwins_wch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const cchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwins_wstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinwstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwvline_set(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const cchar_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pecho_wchar(arg1: *mut WINDOW, arg2: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setcchar(
        arg1: *mut cchar_t,
        arg2: *const wchar_t,
        arg3: attr_t,
        arg4: ::std::os::raw::c_short,
        arg5: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_wset(
        arg1: ::std::os::raw::c_int,
        arg2: *const wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn term_attrs() -> attr_t;
}
extern "C" {
    pub fn unget_wch(arg1: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vid_attr(
        arg1: attr_t,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vid_puts(
        arg1: attr_t,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
        arg4: NCURSES_OUTC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vline_set(arg1: *const cchar_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wadd_wch(arg1: *mut WINDOW, arg2: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wadd_wchnstr(
        arg1: *mut WINDOW,
        arg2: *const cchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wadd_wchstr(arg1: *mut WINDOW, arg2: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddnwstr(
        arg1: *mut WINDOW,
        arg2: *const wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddwstr(arg1: *mut WINDOW, arg2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbkgrnd(arg1: *mut WINDOW, arg2: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbkgrndset(arg1: *mut WINDOW, arg2: *const cchar_t);
}
extern "C" {
    pub fn wborder_set(
        arg1: *mut WINDOW,
        arg2: *const cchar_t,
        arg3: *const cchar_t,
        arg4: *const cchar_t,
        arg5: *const cchar_t,
        arg6: *const cchar_t,
        arg7: *const cchar_t,
        arg8: *const cchar_t,
        arg9: *const cchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wecho_wchar(arg1: *mut WINDOW, arg2: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wget_wch(arg1: *mut WINDOW, arg2: *mut wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wget_wstr(arg1: *mut WINDOW, arg2: *mut wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetbkgrnd(arg1: *mut WINDOW, arg2: *mut cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetn_wstr(
        arg1: *mut WINDOW,
        arg2: *mut wint_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whline_set(
        arg1: *mut WINDOW,
        arg2: *const cchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_wch(arg1: *mut WINDOW, arg2: *mut cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_wchnstr(
        arg1: *mut WINDOW,
        arg2: *mut cchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_wchstr(arg1: *mut WINDOW, arg2: *mut cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winnwstr(
        arg1: *mut WINDOW,
        arg2: *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wins_nwstr(
        arg1: *mut WINDOW,
        arg2: *const wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wins_wch(arg1: *mut WINDOW, arg2: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wins_wstr(arg1: *mut WINDOW, arg2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winwstr(arg1: *mut WINDOW, arg2: *mut wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wunctrl(arg1: *mut cchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wvline_set(
        arg1: *mut WINDOW,
        arg2: *const cchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn term_attrs_sp(arg1: *mut SCREEN) -> attr_t;
}
extern "C" {
    pub fn erasewchar_sp(arg1: *mut SCREEN, arg2: *mut wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killwchar_sp(arg1: *mut SCREEN, arg2: *mut wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unget_wch_sp(arg1: *mut SCREEN, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vid_attr_sp(
        arg1: *mut SCREEN,
        arg2: attr_t,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vid_puts_sp(
        arg1: *mut SCREEN,
        arg2: attr_t,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_void,
        arg5: NCURSES_OUTC_sp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wunctrl_sp(arg1: *mut SCREEN, arg2: *mut cchar_t) -> *mut wchar_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MEVENT {
    pub id: ::std::os::raw::c_short,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub z: ::std::os::raw::c_int,
    pub bstate: mmask_t,
}
#[test]
fn bindgen_test_layout_MEVENT() {
    assert_eq!(
        ::std::mem::size_of::<MEVENT>(),
        20usize,
        concat!("Size of: ", stringify!(MEVENT))
    );
    assert_eq!(
        ::std::mem::align_of::<MEVENT>(),
        4usize,
        concat!("Alignment of ", stringify!(MEVENT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MEVENT>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MEVENT),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MEVENT>())).x as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(MEVENT), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MEVENT>())).y as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(MEVENT), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MEVENT>())).z as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(MEVENT), "::", stringify!(z))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MEVENT>())).bstate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MEVENT),
            "::",
            stringify!(bstate)
        )
    );
}
extern "C" {
    pub fn has_mouse() -> bool;
}
extern "C" {
    pub fn getmouse(arg1: *mut MEVENT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetmouse(arg1: *mut MEVENT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mousemask(arg1: mmask_t, arg2: *mut mmask_t) -> mmask_t;
}
extern "C" {
    pub fn wenclose(
        arg1: *const WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn mouseinterval(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmouse_trafo(
        arg1: *const WINDOW,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: bool,
    ) -> bool;
}
extern "C" {
    pub fn mouse_trafo(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
        arg3: bool,
    ) -> bool;
}
extern "C" {
    pub fn has_mouse_sp(arg1: *mut SCREEN) -> bool;
}
extern "C" {
    pub fn getmouse_sp(arg1: *mut SCREEN, arg2: *mut MEVENT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetmouse_sp(arg1: *mut SCREEN, arg2: *mut MEVENT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mousemask_sp(arg1: *mut SCREEN, arg2: mmask_t, arg3: *mut mmask_t) -> mmask_t;
}
extern "C" {
    pub fn mouseinterval_sp(
        arg1: *mut SCREEN,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mcprint(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_key(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_key_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mcprint_sp(
        arg1: *mut SCREEN,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tracef(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn _traceattr(arg1: attr_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _traceattr2(arg1: ::std::os::raw::c_int, arg2: chtype) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _tracechar(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _tracechtype(arg1: chtype) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _tracechtype2(arg1: ::std::os::raw::c_int, arg2: chtype) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _tracecchar_t(arg1: *const cchar_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _tracecchar_t2(
        arg1: ::std::os::raw::c_int,
        arg2: *const cchar_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn trace(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn curses_trace(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn exit_curses(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn unctrl(arg1: chtype) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn unctrl_sp(arg1: *mut SCREEN, arg2: chtype) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct panel {
    pub win: *mut WINDOW,
    pub below: *mut panel,
    pub above: *mut panel,
    pub user: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_panel() {
    assert_eq!(
        ::std::mem::size_of::<panel>(),
        32usize,
        concat!("Size of: ", stringify!(panel))
    );
    assert_eq!(
        ::std::mem::align_of::<panel>(),
        8usize,
        concat!("Alignment of ", stringify!(panel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<panel>())).win as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(panel),
            "::",
            stringify!(win)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<panel>())).below as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(panel),
            "::",
            stringify!(below)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<panel>())).above as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(panel),
            "::",
            stringify!(above)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<panel>())).user as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(panel),
            "::",
            stringify!(user)
        )
    );
}
pub type PANEL = panel;
extern "C" {
    pub fn panel_window(arg1: *const PANEL) -> *mut WINDOW;
}
extern "C" {
    pub fn update_panels();
}
extern "C" {
    pub fn hide_panel(arg1: *mut PANEL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn show_panel(arg1: *mut PANEL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn del_panel(arg1: *mut PANEL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn top_panel(arg1: *mut PANEL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bottom_panel(arg1: *mut PANEL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn new_panel(arg1: *mut WINDOW) -> *mut PANEL;
}
extern "C" {
    pub fn panel_above(arg1: *const PANEL) -> *mut PANEL;
}
extern "C" {
    pub fn panel_below(arg1: *const PANEL) -> *mut PANEL;
}
extern "C" {
    pub fn set_panel_userptr(
        arg1: *mut PANEL,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn panel_userptr(arg1: *const PANEL) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn move_panel(
        arg1: *mut PANEL,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn replace_panel(arg1: *mut PANEL, arg2: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn panel_hidden(arg1: *const PANEL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ground_panel(arg1: *mut SCREEN) -> *mut PANEL;
}
extern "C" {
    pub fn ceiling_panel(arg1: *mut SCREEN) -> *mut PANEL;
}
extern "C" {
    pub fn update_panels_sp(arg1: *mut SCREEN);
}
pub type Menu_Options = ::std::os::raw::c_int;
pub type Item_Options = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TEXT {
    pub str_: *const ::std::os::raw::c_char,
    pub length: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_TEXT() {
    assert_eq!(
        ::std::mem::size_of::<TEXT>(),
        16usize,
        concat!("Size of: ", stringify!(TEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<TEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(TEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TEXT>())).str_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TEXT),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TEXT>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TEXT),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagITEM {
    pub name: TEXT,
    pub description: TEXT,
    pub imenu: *mut tagMENU,
    pub userptr: *mut ::std::os::raw::c_void,
    pub opt: Item_Options,
    pub index: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub x: ::std::os::raw::c_short,
    pub value: bool,
    pub left: *mut tagITEM,
    pub right: *mut tagITEM,
    pub up: *mut tagITEM,
    pub down: *mut tagITEM,
}
#[test]
fn bindgen_test_layout_tagITEM() {
    assert_eq!(
        ::std::mem::size_of::<tagITEM>(),
        96usize,
        concat!("Size of: ", stringify!(tagITEM))
    );
    assert_eq!(
        ::std::mem::align_of::<tagITEM>(),
        8usize,
        concat!("Alignment of ", stringify!(tagITEM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagITEM>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagITEM>())).description as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagITEM>())).imenu as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(imenu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagITEM>())).userptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(userptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagITEM>())).opt as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagITEM>())).index as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagITEM>())).y as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagITEM>())).x as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagITEM>())).value as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagITEM>())).left as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagITEM>())).right as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagITEM>())).up as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(up)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagITEM>())).down as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(down)
        )
    );
}
pub type Menu_Hook = ::std::option::Option<unsafe extern "C" fn(arg1: *mut tagMENU)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMENU {
    pub height: ::std::os::raw::c_short,
    pub width: ::std::os::raw::c_short,
    pub rows: ::std::os::raw::c_short,
    pub cols: ::std::os::raw::c_short,
    pub frows: ::std::os::raw::c_short,
    pub fcols: ::std::os::raw::c_short,
    pub arows: ::std::os::raw::c_short,
    pub namelen: ::std::os::raw::c_short,
    pub desclen: ::std::os::raw::c_short,
    pub marklen: ::std::os::raw::c_short,
    pub itemlen: ::std::os::raw::c_short,
    pub spc_desc: ::std::os::raw::c_short,
    pub spc_cols: ::std::os::raw::c_short,
    pub spc_rows: ::std::os::raw::c_short,
    pub pattern: *mut ::std::os::raw::c_char,
    pub pindex: ::std::os::raw::c_short,
    pub win: *mut WINDOW,
    pub sub: *mut WINDOW,
    pub userwin: *mut WINDOW,
    pub usersub: *mut WINDOW,
    pub items: *mut *mut ITEM,
    pub nitems: ::std::os::raw::c_short,
    pub curitem: *mut ITEM,
    pub toprow: ::std::os::raw::c_short,
    pub fore: chtype,
    pub back: chtype,
    pub grey: chtype,
    pub pad: ::std::os::raw::c_uchar,
    pub menuinit: Menu_Hook,
    pub menuterm: Menu_Hook,
    pub iteminit: Menu_Hook,
    pub itemterm: Menu_Hook,
    pub userptr: *mut ::std::os::raw::c_void,
    pub mark: *mut ::std::os::raw::c_char,
    pub opt: Menu_Options,
    pub status: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_tagMENU() {
    assert_eq!(
        ::std::mem::size_of::<tagMENU>(),
        184usize,
        concat!("Size of: ", stringify!(tagMENU))
    );
    assert_eq!(
        ::std::mem::align_of::<tagMENU>(),
        8usize,
        concat!("Alignment of ", stringify!(tagMENU))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).height as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).width as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).rows as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).cols as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).frows as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(frows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).fcols as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(fcols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).arows as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(arows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).namelen as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).desclen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(desclen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).marklen as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(marklen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).itemlen as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(itemlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).spc_desc as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(spc_desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).spc_cols as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(spc_cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).spc_rows as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(spc_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).pattern as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(pattern)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).pindex as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(pindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).win as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(win)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).sub as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(sub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).userwin as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(userwin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).usersub as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(usersub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).items as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).nitems as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(nitems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).curitem as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(curitem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).toprow as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(toprow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).fore as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(fore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).back as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(back)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).grey as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(grey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).pad as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).menuinit as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(menuinit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).menuterm as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(menuterm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).iteminit as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(iteminit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).itemterm as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(itemterm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).userptr as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(userptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).mark as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).opt as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMENU>())).status as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(status)
        )
    );
}
extern "C" {
    pub fn menu_items(arg1: *const MENU) -> *mut *mut ITEM;
}
extern "C" {
    pub fn current_item(arg1: *const MENU) -> *mut ITEM;
}
extern "C" {
    pub fn new_item(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ITEM;
}
extern "C" {
    pub fn new_menu(arg1: *mut *mut ITEM) -> *mut MENU;
}
extern "C" {
    pub fn item_opts(arg1: *const ITEM) -> Item_Options;
}
extern "C" {
    pub fn menu_opts(arg1: *const MENU) -> Menu_Options;
}
extern "C" {
    pub fn item_init(arg1: *const MENU) -> Menu_Hook;
}
extern "C" {
    pub fn item_term(arg1: *const MENU) -> Menu_Hook;
}
extern "C" {
    pub fn menu_init(arg1: *const MENU) -> Menu_Hook;
}
extern "C" {
    pub fn menu_term(arg1: *const MENU) -> Menu_Hook;
}
extern "C" {
    pub fn menu_sub(arg1: *const MENU) -> *mut WINDOW;
}
extern "C" {
    pub fn menu_win(arg1: *const MENU) -> *mut WINDOW;
}
extern "C" {
    pub fn item_description(arg1: *const ITEM) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn item_name(arg1: *const ITEM) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn menu_mark(arg1: *const MENU) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn menu_request_name(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn menu_pattern(arg1: *const MENU) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn menu_userptr(arg1: *const MENU) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn item_userptr(arg1: *const ITEM) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn menu_back(arg1: *const MENU) -> chtype;
}
extern "C" {
    pub fn menu_fore(arg1: *const MENU) -> chtype;
}
extern "C" {
    pub fn menu_grey(arg1: *const MENU) -> chtype;
}
extern "C" {
    pub fn free_item(arg1: *mut ITEM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_menu(arg1: *mut MENU) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn item_count(arg1: *const MENU) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn item_index(arg1: *const ITEM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn item_opts_off(arg1: *mut ITEM, arg2: Item_Options) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn item_opts_on(arg1: *mut ITEM, arg2: Item_Options) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn menu_driver(arg1: *mut MENU, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn menu_opts_off(arg1: *mut MENU, arg2: Menu_Options) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn menu_opts_on(arg1: *mut MENU, arg2: Menu_Options) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn menu_pad(arg1: *const MENU) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pos_menu_cursor(arg1: *const MENU) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn post_menu(arg1: *mut MENU) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scale_menu(
        arg1: *const MENU,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_current_item(menu: *mut MENU, item: *mut ITEM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_item_init(arg1: *mut MENU, arg2: Menu_Hook) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_item_opts(arg1: *mut ITEM, arg2: Item_Options) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_item_term(arg1: *mut MENU, arg2: Menu_Hook) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_item_userptr(
        arg1: *mut ITEM,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_item_value(arg1: *mut ITEM, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_menu_back(arg1: *mut MENU, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_menu_fore(arg1: *mut MENU, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_menu_format(
        arg1: *mut MENU,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_menu_grey(arg1: *mut MENU, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_menu_init(arg1: *mut MENU, arg2: Menu_Hook) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_menu_items(arg1: *mut MENU, arg2: *mut *mut ITEM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_menu_mark(
        arg1: *mut MENU,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_menu_opts(arg1: *mut MENU, arg2: Menu_Options) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_menu_pad(arg1: *mut MENU, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_menu_pattern(
        arg1: *mut MENU,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_menu_sub(arg1: *mut MENU, arg2: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_menu_term(arg1: *mut MENU, arg2: Menu_Hook) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_menu_userptr(
        arg1: *mut MENU,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_menu_win(arg1: *mut MENU, arg2: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_top_row(arg1: *mut MENU, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn top_row(arg1: *const MENU) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unpost_menu(arg1: *mut MENU) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn menu_request_by_name(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_menu_spacing(
        arg1: *mut MENU,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn menu_spacing(
        arg1: *const MENU,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn item_value(arg1: *const ITEM) -> bool;
}
extern "C" {
    pub fn item_visible(arg1: *const ITEM) -> bool;
}
extern "C" {
    pub fn menu_format(
        arg1: *const MENU,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn new_menu_sp(arg1: *mut SCREEN, arg2: *mut *mut ITEM) -> *mut MENU;
}
pub type FIELD_CELL = *mut ::std::os::raw::c_void;
pub type Form_Options = ::std::os::raw::c_int;
pub type Field_Options = ::std::os::raw::c_int;
#[doc = "  _PAGE  *"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pagenode {
    pub pmin: ::std::os::raw::c_short,
    pub pmax: ::std::os::raw::c_short,
    pub smin: ::std::os::raw::c_short,
    pub smax: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_pagenode() {
    assert_eq!(
        ::std::mem::size_of::<pagenode>(),
        8usize,
        concat!("Size of: ", stringify!(pagenode))
    );
    assert_eq!(
        ::std::mem::align_of::<pagenode>(),
        2usize,
        concat!("Alignment of ", stringify!(pagenode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pagenode>())).pmin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pagenode),
            "::",
            stringify!(pmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pagenode>())).pmax as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pagenode),
            "::",
            stringify!(pmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pagenode>())).smin as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pagenode),
            "::",
            stringify!(smin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pagenode>())).smax as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(pagenode),
            "::",
            stringify!(smax)
        )
    );
}
#[doc = "  _PAGE  *"]
pub type _PAGE = pagenode;
#[doc = "  FIELD  *"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fieldnode {
    pub status: ::std::os::raw::c_ushort,
    pub rows: ::std::os::raw::c_short,
    pub cols: ::std::os::raw::c_short,
    pub frow: ::std::os::raw::c_short,
    pub fcol: ::std::os::raw::c_short,
    pub drows: ::std::os::raw::c_int,
    pub dcols: ::std::os::raw::c_int,
    pub maxgrow: ::std::os::raw::c_int,
    pub nrow: ::std::os::raw::c_int,
    pub nbuf: ::std::os::raw::c_short,
    pub just: ::std::os::raw::c_short,
    pub page: ::std::os::raw::c_short,
    pub index: ::std::os::raw::c_short,
    pub pad: ::std::os::raw::c_int,
    pub fore: chtype,
    pub back: chtype,
    pub opts: Field_Options,
    pub snext: *mut fieldnode,
    pub sprev: *mut fieldnode,
    pub link: *mut fieldnode,
    pub form: *mut formnode,
    pub type_: *mut typenode,
    pub arg: *mut ::std::os::raw::c_void,
    pub buf: *mut FIELD_CELL,
    pub usrptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_fieldnode() {
    assert_eq!(
        ::std::mem::size_of::<fieldnode>(),
        120usize,
        concat!("Size of: ", stringify!(fieldnode))
    );
    assert_eq!(
        ::std::mem::align_of::<fieldnode>(),
        8usize,
        concat!("Alignment of ", stringify!(fieldnode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).rows as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).cols as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).frow as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(frow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).fcol as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(fcol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).drows as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(drows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).dcols as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(dcols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).maxgrow as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(maxgrow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).nrow as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(nrow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).nbuf as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(nbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).just as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(just)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).page as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(page)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).index as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).pad as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).fore as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(fore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).back as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(back)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).opts as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(opts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).snext as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(snext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).sprev as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(sprev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).link as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).form as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(form)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).type_ as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).arg as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).buf as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldnode>())).usrptr as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldnode),
            "::",
            stringify!(usrptr)
        )
    );
}
#[doc = "  FIELD  *"]
pub type FIELD = fieldnode;
#[doc = "  FORM  *"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct formnode {
    pub status: ::std::os::raw::c_ushort,
    pub rows: ::std::os::raw::c_short,
    pub cols: ::std::os::raw::c_short,
    pub currow: ::std::os::raw::c_int,
    pub curcol: ::std::os::raw::c_int,
    pub toprow: ::std::os::raw::c_int,
    pub begincol: ::std::os::raw::c_int,
    pub maxfield: ::std::os::raw::c_short,
    pub maxpage: ::std::os::raw::c_short,
    pub curpage: ::std::os::raw::c_short,
    pub opts: Form_Options,
    pub win: *mut WINDOW,
    pub sub: *mut WINDOW,
    pub w: *mut WINDOW,
    pub field: *mut *mut FIELD,
    pub current: *mut FIELD,
    pub page: *mut _PAGE,
    pub usrptr: *mut ::std::os::raw::c_void,
    pub forminit: ::std::option::Option<unsafe extern "C" fn(arg1: *mut formnode)>,
    pub formterm: ::std::option::Option<unsafe extern "C" fn(arg1: *mut formnode)>,
    pub fieldinit: ::std::option::Option<unsafe extern "C" fn(arg1: *mut formnode)>,
    pub fieldterm: ::std::option::Option<unsafe extern "C" fn(arg1: *mut formnode)>,
}
#[test]
fn bindgen_test_layout_formnode() {
    assert_eq!(
        ::std::mem::size_of::<formnode>(),
        128usize,
        concat!("Size of: ", stringify!(formnode))
    );
    assert_eq!(
        ::std::mem::align_of::<formnode>(),
        8usize,
        concat!("Alignment of ", stringify!(formnode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).rows as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).cols as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).currow as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(currow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).curcol as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(curcol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).toprow as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(toprow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).begincol as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(begincol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).maxfield as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(maxfield)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).maxpage as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(maxpage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).curpage as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(curpage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).opts as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(opts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).win as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(win)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).sub as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(sub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).w as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).field as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(field)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).current as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).page as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(page)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).usrptr as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(usrptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).forminit as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(forminit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).formterm as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(formterm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).fieldinit as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(fieldinit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formnode>())).fieldterm as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(formnode),
            "::",
            stringify!(fieldterm)
        )
    );
}
#[doc = "  FORM  *"]
pub type FORM = formnode;
#[doc = "  FIELDTYPE  *"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct typenode {
    pub status: ::std::os::raw::c_ushort,
    pub ref_: ::std::os::raw::c_long,
    pub left: *mut typenode,
    pub right: *mut typenode,
    pub makearg: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut va_list) -> *mut ::std::os::raw::c_void,
    >,
    pub copyarg: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub freearg: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub fieldcheck: typenode__bindgen_ty_1,
    pub charcheck: typenode__bindgen_ty_2,
    pub enum_next: typenode__bindgen_ty_3,
    pub enum_prev: typenode__bindgen_ty_4,
    pub genericarg: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union typenode__bindgen_ty_1 {
    pub ofcheck: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut FIELD, arg2: *const ::std::os::raw::c_void) -> bool,
    >,
    pub gfcheck: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut FORM,
            arg2: *mut FIELD,
            arg3: *const ::std::os::raw::c_void,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_typenode__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<typenode__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(typenode__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<typenode__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(typenode__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode__bindgen_ty_1>())).ofcheck as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode__bindgen_ty_1),
            "::",
            stringify!(ofcheck)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode__bindgen_ty_1>())).gfcheck as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode__bindgen_ty_1),
            "::",
            stringify!(gfcheck)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union typenode__bindgen_ty_2 {
    pub occheck: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *const ::std::os::raw::c_void,
        ) -> bool,
    >,
    pub gccheck: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut FORM,
            arg3: *mut FIELD,
            arg4: *const ::std::os::raw::c_void,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_typenode__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<typenode__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(typenode__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<typenode__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(typenode__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode__bindgen_ty_2>())).occheck as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode__bindgen_ty_2),
            "::",
            stringify!(occheck)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode__bindgen_ty_2>())).gccheck as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode__bindgen_ty_2),
            "::",
            stringify!(gccheck)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union typenode__bindgen_ty_3 {
    pub onext: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut FIELD, arg2: *const ::std::os::raw::c_void) -> bool,
    >,
    pub gnext: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut FORM,
            arg2: *mut FIELD,
            arg3: *const ::std::os::raw::c_void,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_typenode__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<typenode__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(typenode__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<typenode__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(typenode__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode__bindgen_ty_3>())).onext as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode__bindgen_ty_3),
            "::",
            stringify!(onext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode__bindgen_ty_3>())).gnext as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode__bindgen_ty_3),
            "::",
            stringify!(gnext)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union typenode__bindgen_ty_4 {
    pub oprev: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut FIELD, arg2: *const ::std::os::raw::c_void) -> bool,
    >,
    pub gprev: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut FORM,
            arg2: *mut FIELD,
            arg3: *const ::std::os::raw::c_void,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_typenode__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<typenode__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(typenode__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<typenode__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(typenode__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode__bindgen_ty_4>())).oprev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode__bindgen_ty_4),
            "::",
            stringify!(oprev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode__bindgen_ty_4>())).gprev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode__bindgen_ty_4),
            "::",
            stringify!(gprev)
        )
    );
}
#[test]
fn bindgen_test_layout_typenode() {
    assert_eq!(
        ::std::mem::size_of::<typenode>(),
        96usize,
        concat!("Size of: ", stringify!(typenode))
    );
    assert_eq!(
        ::std::mem::align_of::<typenode>(),
        8usize,
        concat!("Alignment of ", stringify!(typenode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode>())).ref_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode>())).left as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode>())).right as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode>())).makearg as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode),
            "::",
            stringify!(makearg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode>())).copyarg as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode),
            "::",
            stringify!(copyarg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode>())).freearg as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode),
            "::",
            stringify!(freearg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode>())).fieldcheck as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode),
            "::",
            stringify!(fieldcheck)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode>())).charcheck as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode),
            "::",
            stringify!(charcheck)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode>())).enum_next as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode),
            "::",
            stringify!(enum_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode>())).enum_prev as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode),
            "::",
            stringify!(enum_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typenode>())).genericarg as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(typenode),
            "::",
            stringify!(genericarg)
        )
    );
}
#[doc = "  FIELDTYPE  *"]
pub type FIELDTYPE = typenode;
pub type Form_Hook = ::std::option::Option<unsafe extern "C" fn(arg1: *mut FORM)>;
extern "C" {
    #[doc = "  standard field types  *"]
    pub static mut TYPE_ALPHA: *mut FIELDTYPE;
}
extern "C" {
    pub static mut TYPE_ALNUM: *mut FIELDTYPE;
}
extern "C" {
    pub static mut TYPE_ENUM: *mut FIELDTYPE;
}
extern "C" {
    pub static mut TYPE_INTEGER: *mut FIELDTYPE;
}
extern "C" {
    pub static mut TYPE_NUMERIC: *mut FIELDTYPE;
}
extern "C" {
    pub static mut TYPE_REGEXP: *mut FIELDTYPE;
}
extern "C" {
    #[doc = "  built-in additional field types  *"]
    #[doc = "  They are not defined in SVr4     *"]
    pub static mut TYPE_IPV4: *mut FIELDTYPE;
}
extern "C" {
    #[doc = "  FIELDTYPE routines  *"]
    pub fn new_fieldtype(
        field_check: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut FIELD, arg2: *const ::std::os::raw::c_void) -> bool,
        >,
        char_check: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *const ::std::os::raw::c_void,
            ) -> bool,
        >,
    ) -> *mut FIELDTYPE;
}
extern "C" {
    pub fn link_fieldtype(arg1: *mut FIELDTYPE, arg2: *mut FIELDTYPE) -> *mut FIELDTYPE;
}
extern "C" {
    pub fn free_fieldtype(arg1: *mut FIELDTYPE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_fieldtype_arg(
        arg1: *mut FIELDTYPE,
        make_arg: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut va_list) -> *mut ::std::os::raw::c_void,
        >,
        copy_arg: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_void,
        >,
        free_arg: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_fieldtype_choice(
        arg1: *mut FIELDTYPE,
        next_choice: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut FIELD, arg2: *const ::std::os::raw::c_void) -> bool,
        >,
        prev_choice: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut FIELD, arg2: *const ::std::os::raw::c_void) -> bool,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  FIELD routines  *"]
    pub fn new_field(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> *mut FIELD;
}
extern "C" {
    pub fn dup_field(
        arg1: *mut FIELD,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut FIELD;
}
extern "C" {
    pub fn link_field(
        arg1: *mut FIELD,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut FIELD;
}
extern "C" {
    pub fn free_field(arg1: *mut FIELD) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn field_info(
        arg1: *const FIELD,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dynamic_field_info(
        arg1: *const FIELD,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_max_field(arg1: *mut FIELD, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn move_field(
        arg1: *mut FIELD,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_field_type(arg1: *mut FIELD, arg2: *mut FIELDTYPE, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_new_page(arg1: *mut FIELD, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_field_just(arg1: *mut FIELD, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn field_just(arg1: *const FIELD) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_field_fore(arg1: *mut FIELD, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_field_back(arg1: *mut FIELD, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_field_pad(arg1: *mut FIELD, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn field_pad(arg1: *const FIELD) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_field_buffer(
        arg1: *mut FIELD,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_field_status(arg1: *mut FIELD, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_field_userptr(
        arg1: *mut FIELD,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_field_opts(arg1: *mut FIELD, arg2: Field_Options) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn field_opts_on(arg1: *mut FIELD, arg2: Field_Options) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn field_opts_off(arg1: *mut FIELD, arg2: Field_Options) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn field_fore(arg1: *const FIELD) -> chtype;
}
extern "C" {
    pub fn field_back(arg1: *const FIELD) -> chtype;
}
extern "C" {
    pub fn new_page(arg1: *const FIELD) -> bool;
}
extern "C" {
    pub fn field_status(arg1: *const FIELD) -> bool;
}
extern "C" {
    pub fn field_arg(arg1: *const FIELD) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn field_userptr(arg1: *const FIELD) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn field_type(arg1: *const FIELD) -> *mut FIELDTYPE;
}
extern "C" {
    pub fn field_buffer(
        arg1: *const FIELD,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn field_opts(arg1: *const FIELD) -> Field_Options;
}
extern "C" {
    #[doc = "  FORM routines  *"]
    pub fn new_form(arg1: *mut *mut FIELD) -> *mut FORM;
}
extern "C" {
    pub fn form_fields(arg1: *const FORM) -> *mut *mut FIELD;
}
extern "C" {
    pub fn current_field(arg1: *const FORM) -> *mut FIELD;
}
extern "C" {
    pub fn form_win(arg1: *const FORM) -> *mut WINDOW;
}
extern "C" {
    pub fn form_sub(arg1: *const FORM) -> *mut WINDOW;
}
extern "C" {
    pub fn form_init(arg1: *const FORM) -> Form_Hook;
}
extern "C" {
    pub fn form_term(arg1: *const FORM) -> Form_Hook;
}
extern "C" {
    pub fn field_init(arg1: *const FORM) -> Form_Hook;
}
extern "C" {
    pub fn field_term(arg1: *const FORM) -> Form_Hook;
}
extern "C" {
    pub fn free_form(arg1: *mut FORM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_form_fields(arg1: *mut FORM, arg2: *mut *mut FIELD) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn field_count(arg1: *const FORM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_form_win(arg1: *mut FORM, arg2: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_form_sub(arg1: *mut FORM, arg2: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_current_field(arg1: *mut FORM, arg2: *mut FIELD) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unfocus_current_field(arg1: *mut FORM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn field_index(arg1: *const FIELD) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_form_page(arg1: *mut FORM, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn form_page(arg1: *const FORM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scale_form(
        arg1: *const FORM,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_form_init(arg1: *mut FORM, arg2: Form_Hook) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_form_term(arg1: *mut FORM, arg2: Form_Hook) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_field_init(arg1: *mut FORM, arg2: Form_Hook) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_field_term(arg1: *mut FORM, arg2: Form_Hook) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn post_form(arg1: *mut FORM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unpost_form(arg1: *mut FORM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pos_form_cursor(arg1: *mut FORM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn form_driver(arg1: *mut FORM, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn form_driver_w(
        arg1: *mut FORM,
        arg2: ::std::os::raw::c_int,
        arg3: wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_form_userptr(
        arg1: *mut FORM,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_form_opts(arg1: *mut FORM, arg2: Form_Options) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn form_opts_on(arg1: *mut FORM, arg2: Form_Options) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn form_opts_off(arg1: *mut FORM, arg2: Form_Options) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn form_request_by_name(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn form_request_name(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn form_userptr(arg1: *const FORM) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn form_opts(arg1: *const FORM) -> Form_Options;
}
extern "C" {
    pub fn data_ahead(arg1: *const FORM) -> bool;
}
extern "C" {
    pub fn data_behind(arg1: *const FORM) -> bool;
}
extern "C" {
    pub fn new_form_sp(arg1: *mut SCREEN, arg2: *mut *mut FIELD) -> *mut FORM;
}
pub const A_ATTRIBUTES: attr_t = 4294967040;
pub const A_CHARTEXT: attr_t = 255;
pub const A_COLOR: attr_t = 65280;
pub const A_STANDOUT: attr_t = 65536;
pub const A_UNDERLINE: attr_t = 131072;
pub const A_REVERSE: attr_t = 262144;
pub const A_BLINK: attr_t = 524288;
pub const A_DIM: attr_t = 1048576;
pub const A_BOLD: attr_t = 2097152;
pub const A_ALTCHARSET: attr_t = 4194304;
pub const A_INVIS: attr_t = 8388608;
pub const A_PROTECT: attr_t = 16777216;
pub const A_HORIZONTAL: attr_t = 33554432;
pub const A_LEFT: attr_t = 67108864;
pub const A_LOW: attr_t = 134217728;
pub const A_RIGHT: attr_t = 268435456;
pub const A_TOP: attr_t = 536870912;
pub const A_VERTICAL: attr_t = 1073741824;
pub const A_ITALIC: attr_t = 2147483648;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
